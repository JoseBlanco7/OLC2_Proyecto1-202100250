//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declaraciones"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaraciones([NotNull] LanguageParser.DeclaracionesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declaraciones"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaraciones([NotNull] LanguageParser.DeclaracionesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.varDeclaciones"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclaciones([NotNull] LanguageParser.VarDeclacionesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.varDeclaciones"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclaciones([NotNull] LanguageParser.VarDeclacionesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructDecl([NotNull] LanguageParser.StructDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructDecl([NotNull] LanguageParser.StructDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructMember([NotNull] LanguageParser.StructMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructMember([NotNull] LanguageParser.StructMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.typeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeClause([NotNull] LanguageParser.TypeClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.typeClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeClause([NotNull] LanguageParser.TypeClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExprStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprStmt([NotNull] LanguageParser.ExprStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PrintStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStmt([NotNull] LanguageParser.PrintStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStmt([NotNull] LanguageParser.BlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStmt([NotNull] LanguageParser.BlockStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] LanguageParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] LanguageParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SwitchStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStmt([NotNull] LanguageParser.SwitchStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] LanguageParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] LanguageParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] LanguageParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForConditionStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForConditionStmt([NotNull] LanguageParser.ForConditionStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForConditionStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForConditionStmt([NotNull] LanguageParser.ForConditionStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForRangeStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForRangeStmt([NotNull] LanguageParser.ForRangeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForRangeStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForRangeStmt([NotNull] LanguageParser.ForRangeStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStmt([NotNull] LanguageParser.BreakStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BreakStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStmt([NotNull] LanguageParser.BreakStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStmt([NotNull] LanguageParser.ContinueStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ContinueStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStmt([NotNull] LanguageParser.ContinueStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] LanguageParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReturnStmt</c>
	/// labeled alternative in <see cref="LanguageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] LanguageParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.elseifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseifStmt([NotNull] LanguageParser.ElseifStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.elseifStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseifStmt([NotNull] LanguageParser.ElseifStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.elseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStmt([NotNull] LanguageParser.ElseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.elseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStmt([NotNull] LanguageParser.ElseStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseStmt([NotNull] LanguageParser.CaseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.caseStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseStmt([NotNull] LanguageParser.CaseStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.defaultStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultStmt([NotNull] LanguageParser.DefaultStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.defaultStmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultStmt([NotNull] LanguageParser.DefaultStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInit([NotNull] LanguageParser.ForInitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.printArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintArgs([NotNull] LanguageParser.PrintArgsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.printArgs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintArgs([NotNull] LanguageParser.PrintArgsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructLiteral([NotNull] LanguageParser.StructLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructLiteral([NotNull] LanguageParser.StructLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Callee</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallee([NotNull] LanguageParser.CalleeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Callee</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallee([NotNull] LanguageParser.CalleeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructFieldAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructFieldAccess([NotNull] LanguageParser.StructFieldAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructFieldAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructFieldAccess([NotNull] LanguageParser.StructFieldAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOr([NotNull] LanguageParser.OrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Or</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOr([NotNull] LanguageParser.OrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SliceLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSliceLiteral([NotNull] LanguageParser.SliceLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SliceLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSliceLiteral([NotNull] LanguageParser.SliceLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDiv([NotNull] LanguageParser.MulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDiv</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDiv([NotNull] LanguageParser.MulDivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Parens</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] LanguageParser.ParensContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DotCallee</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDotCallee([NotNull] LanguageParser.DotCalleeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DotCallee</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDotCallee([NotNull] LanguageParser.DotCalleeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] LanguageParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignSub([NotNull] LanguageParser.AssignSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignSub([NotNull] LanguageParser.AssignSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] LanguageParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] LanguageParser.IntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] LanguageParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] LanguageParser.BoolContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIncrement([NotNull] LanguageParser.IncrementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIncrement([NotNull] LanguageParser.IncrementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality([NotNull] LanguageParser.EqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality([NotNull] LanguageParser.EqualityContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecrement([NotNull] LanguageParser.DecrementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecrement([NotNull] LanguageParser.DecrementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSub</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSub([NotNull] LanguageParser.AddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IndexAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexAccess([NotNull] LanguageParser.IndexAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IndexAccess</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexAccess([NotNull] LanguageParser.IndexAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StructFieldAssign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructFieldAssign([NotNull] LanguageParser.StructFieldAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StructFieldAssign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructFieldAssign([NotNull] LanguageParser.StructFieldAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational([NotNull] LanguageParser.RelationalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Relational</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational([NotNull] LanguageParser.RelationalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignAdd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignAdd([NotNull] LanguageParser.AssignAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignAdd</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignAdd([NotNull] LanguageParser.AssignAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] LanguageParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteral</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] LanguageParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Nil</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNil([NotNull] LanguageParser.NilContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Nil</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNil([NotNull] LanguageParser.NilContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Float</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] LanguageParser.FloatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] LanguageParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] LanguageParser.NotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd([NotNull] LanguageParser.AndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>And</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd([NotNull] LanguageParser.AndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IndexAssign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexAssign([NotNull] LanguageParser.IndexAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IndexAssign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexAssign([NotNull] LanguageParser.IndexAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] LanguageParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] LanguageParser.AssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegate([NotNull] LanguageParser.NegateContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegate([NotNull] LanguageParser.NegateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Id</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] LanguageParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Id</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] LanguageParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Rune</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRune([NotNull] LanguageParser.RuneContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCall([NotNull] LanguageParser.CallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCall([NotNull] LanguageParser.CallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArg([NotNull] LanguageParser.ArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArg([NotNull] LanguageParser.ArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arrayItems"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayItems([NotNull] LanguageParser.ArrayItemsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arrayItems"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayItems([NotNull] LanguageParser.ArrayItemsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arrayItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayItem([NotNull] LanguageParser.ArrayItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arrayItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayItem([NotNull] LanguageParser.ArrayItemContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] LanguageParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] LanguageParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structLiteralList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructLiteralList([NotNull] LanguageParser.StructLiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structLiteralList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructLiteralList([NotNull] LanguageParser.StructLiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.structLiteralItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructLiteralItem([NotNull] LanguageParser.StructLiteralItemContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.structLiteralItem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructLiteralItem([NotNull] LanguageParser.StructLiteralItemContext context);
}
} // namespace analyzer
