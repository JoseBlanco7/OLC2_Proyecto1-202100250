//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, INT=27, BOOL=28, FLOAT=29, STRING=30, WS=31, ID=32, 
		COMMENT=33, ML_COMMENT=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "INT", "BOOL", "FLOAT", "STRING", "WS", "ID", "COMMENT", "ML_COMMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "'print('", "')'", "'{'", "'}'", "'if'", 
		"'('", "'else'", "'while'", "'for'", "'break'", "'continue'", "'return'", 
		"'-'", "'*'", "'/'", "'+'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "INT", "BOOL", "FLOAT", "STRING", "WS", "ID", "COMMENT", 
		"ML_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,231,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,
		1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,
		22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,4,26,160,8,26,11,
		26,12,26,161,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,173,8,27,
		1,28,4,28,176,8,28,11,28,12,28,177,1,28,1,28,4,28,182,8,28,11,28,12,28,
		183,1,29,1,29,5,29,188,8,29,10,29,12,29,191,9,29,1,29,1,29,1,30,4,30,196,
		8,30,11,30,12,30,197,1,30,1,30,1,31,4,31,203,8,31,11,31,12,31,204,1,32,
		1,32,1,32,1,32,5,32,211,8,32,10,32,12,32,214,9,32,1,32,1,32,1,33,1,33,
		1,33,1,33,5,33,222,8,33,10,33,12,33,225,9,33,1,33,1,33,1,33,1,33,1,33,
		1,223,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,5,1,0,48,
		57,1,0,34,34,3,0,9,10,13,13,32,32,2,0,65,90,97,122,2,0,10,10,13,13,239,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,1,69,1,0,0,0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,9,84,1,0,0,
		0,11,86,1,0,0,0,13,88,1,0,0,0,15,90,1,0,0,0,17,93,1,0,0,0,19,95,1,0,0,
		0,21,100,1,0,0,0,23,106,1,0,0,0,25,110,1,0,0,0,27,116,1,0,0,0,29,125,1,
		0,0,0,31,132,1,0,0,0,33,134,1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,140,
		1,0,0,0,41,142,1,0,0,0,43,144,1,0,0,0,45,147,1,0,0,0,47,150,1,0,0,0,49,
		153,1,0,0,0,51,156,1,0,0,0,53,159,1,0,0,0,55,172,1,0,0,0,57,175,1,0,0,
		0,59,185,1,0,0,0,61,195,1,0,0,0,63,202,1,0,0,0,65,206,1,0,0,0,67,217,1,
		0,0,0,69,70,5,118,0,0,70,71,5,97,0,0,71,72,5,114,0,0,72,2,1,0,0,0,73,74,
		5,61,0,0,74,4,1,0,0,0,75,76,5,59,0,0,76,6,1,0,0,0,77,78,5,112,0,0,78,79,
		5,114,0,0,79,80,5,105,0,0,80,81,5,110,0,0,81,82,5,116,0,0,82,83,5,40,0,
		0,83,8,1,0,0,0,84,85,5,41,0,0,85,10,1,0,0,0,86,87,5,123,0,0,87,12,1,0,
		0,0,88,89,5,125,0,0,89,14,1,0,0,0,90,91,5,105,0,0,91,92,5,102,0,0,92,16,
		1,0,0,0,93,94,5,40,0,0,94,18,1,0,0,0,95,96,5,101,0,0,96,97,5,108,0,0,97,
		98,5,115,0,0,98,99,5,101,0,0,99,20,1,0,0,0,100,101,5,119,0,0,101,102,5,
		104,0,0,102,103,5,105,0,0,103,104,5,108,0,0,104,105,5,101,0,0,105,22,1,
		0,0,0,106,107,5,102,0,0,107,108,5,111,0,0,108,109,5,114,0,0,109,24,1,0,
		0,0,110,111,5,98,0,0,111,112,5,114,0,0,112,113,5,101,0,0,113,114,5,97,
		0,0,114,115,5,107,0,0,115,26,1,0,0,0,116,117,5,99,0,0,117,118,5,111,0,
		0,118,119,5,110,0,0,119,120,5,116,0,0,120,121,5,105,0,0,121,122,5,110,
		0,0,122,123,5,117,0,0,123,124,5,101,0,0,124,28,1,0,0,0,125,126,5,114,0,
		0,126,127,5,101,0,0,127,128,5,116,0,0,128,129,5,117,0,0,129,130,5,114,
		0,0,130,131,5,110,0,0,131,30,1,0,0,0,132,133,5,45,0,0,133,32,1,0,0,0,134,
		135,5,42,0,0,135,34,1,0,0,0,136,137,5,47,0,0,137,36,1,0,0,0,138,139,5,
		43,0,0,139,38,1,0,0,0,140,141,5,62,0,0,141,40,1,0,0,0,142,143,5,60,0,0,
		143,42,1,0,0,0,144,145,5,62,0,0,145,146,5,61,0,0,146,44,1,0,0,0,147,148,
		5,60,0,0,148,149,5,61,0,0,149,46,1,0,0,0,150,151,5,61,0,0,151,152,5,61,
		0,0,152,48,1,0,0,0,153,154,5,33,0,0,154,155,5,61,0,0,155,50,1,0,0,0,156,
		157,5,44,0,0,157,52,1,0,0,0,158,160,7,0,0,0,159,158,1,0,0,0,160,161,1,
		0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,54,1,0,0,0,163,164,5,116,0,0,
		164,165,5,114,0,0,165,166,5,117,0,0,166,173,5,101,0,0,167,168,5,102,0,
		0,168,169,5,97,0,0,169,170,5,108,0,0,170,171,5,115,0,0,171,173,5,101,0,
		0,172,163,1,0,0,0,172,167,1,0,0,0,173,56,1,0,0,0,174,176,7,0,0,0,175,174,
		1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,
		0,179,181,5,46,0,0,180,182,7,0,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,
		181,1,0,0,0,183,184,1,0,0,0,184,58,1,0,0,0,185,189,5,34,0,0,186,188,8,
		1,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,
		190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,34,0,0,193,60,1,0,0,0,194,196,
		7,2,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,
		0,198,199,1,0,0,0,199,200,6,30,0,0,200,62,1,0,0,0,201,203,7,3,0,0,202,
		201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,64,1,0,
		0,0,206,207,5,47,0,0,207,208,5,47,0,0,208,212,1,0,0,0,209,211,8,4,0,0,
		210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,
		1,0,0,0,214,212,1,0,0,0,215,216,6,32,0,0,216,66,1,0,0,0,217,218,5,47,0,
		0,218,219,5,42,0,0,219,223,1,0,0,0,220,222,9,0,0,0,221,220,1,0,0,0,222,
		225,1,0,0,0,223,224,1,0,0,0,223,221,1,0,0,0,224,226,1,0,0,0,225,223,1,
		0,0,0,226,227,5,42,0,0,227,228,5,47,0,0,228,229,1,0,0,0,229,230,6,33,0,
		0,230,68,1,0,0,0,10,0,161,172,177,183,189,197,204,212,223,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
