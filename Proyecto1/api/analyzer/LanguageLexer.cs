//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, INT=37, BOOL=38, FLOAT=39, 
		STRING=40, RUNE=41, WS=42, VAR=43, IF=44, ELSE=45, SWITCH=46, CASE=47, 
		DEFAULT=48, DOT=49, FOR=50, WHILE=51, BREAK=52, CONTINUE=53, RETURN=54, 
		NIL=55, ID=56, COMMENT=57, ML_COMMENT=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "INT", "BOOL", "FLOAT", "STRING", "ESC", "RUNE", 
		"WS", "VAR", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "DOT", "FOR", 
		"WHILE", "BREAK", "CONTINUE", "RETURN", "NIL", "ID", "COMMENT", "ML_COMMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "':='", "'int'", "'float64'", "'bool'", "'string'", 
		"'rune'", "'['", "']'", "'fmt.Println('", "')'", "'{'", "'}'", "'('", 
		"','", "'range'", "':'", "'-'", "'!'", "'++'", "'--'", "'*'", "'/'", "'%'", 
		"'+'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'+='", 
		"'-='", null, null, null, null, null, null, "'var'", "'if'", "'else'", 
		"'switch'", "'case'", "'default'", "'.'", "'for'", "'while'", "'break'", 
		"'continue'", "'return'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "INT", "BOOL", "FLOAT", "STRING", "RUNE", "WS", "VAR", "IF", "ELSE", 
		"SWITCH", "CASE", "DEFAULT", "DOT", "FOR", "WHILE", "BREAK", "CONTINUE", 
		"RETURN", "NIL", "ID", "COMMENT", "ML_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,389,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
		14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
		25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
		30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
		35,1,35,1,36,4,36,238,8,36,11,36,12,36,239,1,37,1,37,1,37,1,37,1,37,1,
		37,1,37,1,37,1,37,3,37,251,8,37,1,38,4,38,254,8,38,11,38,12,38,255,1,38,
		1,38,4,38,260,8,38,11,38,12,38,261,1,39,1,39,1,39,5,39,267,8,39,10,39,
		12,39,270,9,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,4,42,
		282,8,42,11,42,12,42,283,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
		1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,
		1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
		1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,5,56,360,8,56,10,56,12,56,
		363,9,56,1,57,1,57,1,57,1,57,5,57,369,8,57,10,57,12,57,372,9,57,1,57,1,
		57,1,58,1,58,1,58,1,58,5,58,380,8,58,10,58,12,58,383,9,58,1,58,1,58,1,
		58,1,58,1,58,1,381,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
		69,35,71,36,73,37,75,38,77,39,79,40,81,0,83,41,85,42,87,43,89,44,91,45,
		93,46,95,47,97,48,99,49,101,50,103,51,105,52,107,53,109,54,111,55,113,
		56,115,57,117,58,1,0,7,1,0,48,57,2,0,34,34,92,92,7,0,34,34,92,92,98,98,
		102,102,110,110,114,114,116,116,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,
		122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,397,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
		0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,123,1,0,
		0,0,7,126,1,0,0,0,9,130,1,0,0,0,11,138,1,0,0,0,13,143,1,0,0,0,15,150,1,
		0,0,0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,1,0,0,0,23,172,1,0,0,0,25,174,
		1,0,0,0,27,176,1,0,0,0,29,178,1,0,0,0,31,180,1,0,0,0,33,182,1,0,0,0,35,
		188,1,0,0,0,37,190,1,0,0,0,39,192,1,0,0,0,41,194,1,0,0,0,43,197,1,0,0,
		0,45,200,1,0,0,0,47,202,1,0,0,0,49,204,1,0,0,0,51,206,1,0,0,0,53,208,1,
		0,0,0,55,210,1,0,0,0,57,212,1,0,0,0,59,215,1,0,0,0,61,218,1,0,0,0,63,221,
		1,0,0,0,65,224,1,0,0,0,67,227,1,0,0,0,69,230,1,0,0,0,71,233,1,0,0,0,73,
		237,1,0,0,0,75,250,1,0,0,0,77,253,1,0,0,0,79,263,1,0,0,0,81,273,1,0,0,
		0,83,276,1,0,0,0,85,281,1,0,0,0,87,287,1,0,0,0,89,291,1,0,0,0,91,294,1,
		0,0,0,93,299,1,0,0,0,95,306,1,0,0,0,97,311,1,0,0,0,99,319,1,0,0,0,101,
		321,1,0,0,0,103,325,1,0,0,0,105,331,1,0,0,0,107,337,1,0,0,0,109,346,1,
		0,0,0,111,353,1,0,0,0,113,357,1,0,0,0,115,364,1,0,0,0,117,375,1,0,0,0,
		119,120,5,61,0,0,120,2,1,0,0,0,121,122,5,59,0,0,122,4,1,0,0,0,123,124,
		5,58,0,0,124,125,5,61,0,0,125,6,1,0,0,0,126,127,5,105,0,0,127,128,5,110,
		0,0,128,129,5,116,0,0,129,8,1,0,0,0,130,131,5,102,0,0,131,132,5,108,0,
		0,132,133,5,111,0,0,133,134,5,97,0,0,134,135,5,116,0,0,135,136,5,54,0,
		0,136,137,5,52,0,0,137,10,1,0,0,0,138,139,5,98,0,0,139,140,5,111,0,0,140,
		141,5,111,0,0,141,142,5,108,0,0,142,12,1,0,0,0,143,144,5,115,0,0,144,145,
		5,116,0,0,145,146,5,114,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,149,
		5,103,0,0,149,14,1,0,0,0,150,151,5,114,0,0,151,152,5,117,0,0,152,153,5,
		110,0,0,153,154,5,101,0,0,154,16,1,0,0,0,155,156,5,91,0,0,156,18,1,0,0,
		0,157,158,5,93,0,0,158,20,1,0,0,0,159,160,5,102,0,0,160,161,5,109,0,0,
		161,162,5,116,0,0,162,163,5,46,0,0,163,164,5,80,0,0,164,165,5,114,0,0,
		165,166,5,105,0,0,166,167,5,110,0,0,167,168,5,116,0,0,168,169,5,108,0,
		0,169,170,5,110,0,0,170,171,5,40,0,0,171,22,1,0,0,0,172,173,5,41,0,0,173,
		24,1,0,0,0,174,175,5,123,0,0,175,26,1,0,0,0,176,177,5,125,0,0,177,28,1,
		0,0,0,178,179,5,40,0,0,179,30,1,0,0,0,180,181,5,44,0,0,181,32,1,0,0,0,
		182,183,5,114,0,0,183,184,5,97,0,0,184,185,5,110,0,0,185,186,5,103,0,0,
		186,187,5,101,0,0,187,34,1,0,0,0,188,189,5,58,0,0,189,36,1,0,0,0,190,191,
		5,45,0,0,191,38,1,0,0,0,192,193,5,33,0,0,193,40,1,0,0,0,194,195,5,43,0,
		0,195,196,5,43,0,0,196,42,1,0,0,0,197,198,5,45,0,0,198,199,5,45,0,0,199,
		44,1,0,0,0,200,201,5,42,0,0,201,46,1,0,0,0,202,203,5,47,0,0,203,48,1,0,
		0,0,204,205,5,37,0,0,205,50,1,0,0,0,206,207,5,43,0,0,207,52,1,0,0,0,208,
		209,5,62,0,0,209,54,1,0,0,0,210,211,5,60,0,0,211,56,1,0,0,0,212,213,5,
		62,0,0,213,214,5,61,0,0,214,58,1,0,0,0,215,216,5,60,0,0,216,217,5,61,0,
		0,217,60,1,0,0,0,218,219,5,61,0,0,219,220,5,61,0,0,220,62,1,0,0,0,221,
		222,5,33,0,0,222,223,5,61,0,0,223,64,1,0,0,0,224,225,5,38,0,0,225,226,
		5,38,0,0,226,66,1,0,0,0,227,228,5,124,0,0,228,229,5,124,0,0,229,68,1,0,
		0,0,230,231,5,43,0,0,231,232,5,61,0,0,232,70,1,0,0,0,233,234,5,45,0,0,
		234,235,5,61,0,0,235,72,1,0,0,0,236,238,7,0,0,0,237,236,1,0,0,0,238,239,
		1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,74,1,0,0,0,241,242,5,116,0,
		0,242,243,5,114,0,0,243,244,5,117,0,0,244,251,5,101,0,0,245,246,5,102,
		0,0,246,247,5,97,0,0,247,248,5,108,0,0,248,249,5,115,0,0,249,251,5,101,
		0,0,250,241,1,0,0,0,250,245,1,0,0,0,251,76,1,0,0,0,252,254,7,0,0,0,253,
		252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,1,
		0,0,0,257,259,5,46,0,0,258,260,7,0,0,0,259,258,1,0,0,0,260,261,1,0,0,0,
		261,259,1,0,0,0,261,262,1,0,0,0,262,78,1,0,0,0,263,268,5,34,0,0,264,267,
		3,81,40,0,265,267,8,1,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,270,1,0,
		0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,
		272,5,34,0,0,272,80,1,0,0,0,273,274,5,92,0,0,274,275,7,2,0,0,275,82,1,
		0,0,0,276,277,5,39,0,0,277,278,9,0,0,0,278,279,5,39,0,0,279,84,1,0,0,0,
		280,282,7,3,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,
		1,0,0,0,284,285,1,0,0,0,285,286,6,42,0,0,286,86,1,0,0,0,287,288,5,118,
		0,0,288,289,5,97,0,0,289,290,5,114,0,0,290,88,1,0,0,0,291,292,5,105,0,
		0,292,293,5,102,0,0,293,90,1,0,0,0,294,295,5,101,0,0,295,296,5,108,0,0,
		296,297,5,115,0,0,297,298,5,101,0,0,298,92,1,0,0,0,299,300,5,115,0,0,300,
		301,5,119,0,0,301,302,5,105,0,0,302,303,5,116,0,0,303,304,5,99,0,0,304,
		305,5,104,0,0,305,94,1,0,0,0,306,307,5,99,0,0,307,308,5,97,0,0,308,309,
		5,115,0,0,309,310,5,101,0,0,310,96,1,0,0,0,311,312,5,100,0,0,312,313,5,
		101,0,0,313,314,5,102,0,0,314,315,5,97,0,0,315,316,5,117,0,0,316,317,5,
		108,0,0,317,318,5,116,0,0,318,98,1,0,0,0,319,320,5,46,0,0,320,100,1,0,
		0,0,321,322,5,102,0,0,322,323,5,111,0,0,323,324,5,114,0,0,324,102,1,0,
		0,0,325,326,5,119,0,0,326,327,5,104,0,0,327,328,5,105,0,0,328,329,5,108,
		0,0,329,330,5,101,0,0,330,104,1,0,0,0,331,332,5,98,0,0,332,333,5,114,0,
		0,333,334,5,101,0,0,334,335,5,97,0,0,335,336,5,107,0,0,336,106,1,0,0,0,
		337,338,5,99,0,0,338,339,5,111,0,0,339,340,5,110,0,0,340,341,5,116,0,0,
		341,342,5,105,0,0,342,343,5,110,0,0,343,344,5,117,0,0,344,345,5,101,0,
		0,345,108,1,0,0,0,346,347,5,114,0,0,347,348,5,101,0,0,348,349,5,116,0,
		0,349,350,5,117,0,0,350,351,5,114,0,0,351,352,5,110,0,0,352,110,1,0,0,
		0,353,354,5,110,0,0,354,355,5,105,0,0,355,356,5,108,0,0,356,112,1,0,0,
		0,357,361,7,4,0,0,358,360,7,5,0,0,359,358,1,0,0,0,360,363,1,0,0,0,361,
		359,1,0,0,0,361,362,1,0,0,0,362,114,1,0,0,0,363,361,1,0,0,0,364,365,5,
		47,0,0,365,366,5,47,0,0,366,370,1,0,0,0,367,369,8,6,0,0,368,367,1,0,0,
		0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,
		370,1,0,0,0,373,374,6,57,0,0,374,116,1,0,0,0,375,376,5,47,0,0,376,377,
		5,42,0,0,377,381,1,0,0,0,378,380,9,0,0,0,379,378,1,0,0,0,380,383,1,0,0,
		0,381,382,1,0,0,0,381,379,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,
		385,5,42,0,0,385,386,5,47,0,0,386,387,1,0,0,0,387,388,6,58,0,0,388,118,
		1,0,0,0,11,0,239,250,255,261,266,268,283,361,370,381,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
